Continuous-Integration:
  runs-on: ubuntu-latest

  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecrname: Deploy Application Docker Image to EC2 instance

on:
  push:
    branches: [main]

jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Debug image variables
        run: |
          echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}"
          echo "ECR_REPOSITORY=${{ secrets.ECR_REPO }}"
          echo "IMAGE_TAG=latest"

      - name: Pre-pull python base image
        run: docker pull python:3.10-slim-buster

      - name: Build Docker image
        id: build-image
        run: |
          IMAGE_TAG=latest
          IMAGE_NAME="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:$IMAGE_TAG"
          echo "Building Docker image: $IMAGE_NAME"
          docker build --progress=plain -t $IMAGE_NAME .
          echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Push Docker image to ECR
        run: |
          IMAGE_TAG=latest
          IMAGE_NAME="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:$IMAGE_TAG"
          echo "Pushing Docker image: $IMAGE_NAME"
          docker push $IMAGE_NAME

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run Docker Image to serve users
        run: |
          IMAGE_TAG=latest
          IMAGE_NAME="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:$IMAGE_TAG"
          docker run -d \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
            -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
            -e GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
            -p 8080:8080 \
            $IMAGE_NAME

      uses: aws-actions/amazon-ecr-login@v1

    - name: Debug image variables
      run: |
        echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}"
        echo "ECR_REPOSITORY=${{ secrets.ECR_REPO }}"
        echo "IMAGE_TAG=latest"

    - name: Pre-pull python base image
      run: docker pull python:3.10-slim-buster

    - name: Build Docker image
      id: build-image
      run: |
        IMAGE_TAG=latest
        IMAGE_NAME="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:$IMAGE_TAG"
        echo "Building Docker image: $IMAGE_NAME"
        docker build --progress=plain -t $IMAGE_NAME .
        echo "image=$IMAGE_NAME" >> $GITHUB_OUTPUT

    - name: Push Docker image to ECR
      run: |
        IMAGE_TAG=latest
        IMAGE_NAME="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:$IMAGE_TAG"
        echo "Pushing Docker image: $IMAGE_NAME"
        docker push $IMAGE_NAME
